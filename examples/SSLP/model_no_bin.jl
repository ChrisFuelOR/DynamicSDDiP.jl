import SDDP
import DynamicSDDiP
import JuMP
import Infiltrator
using Revise

include("scenario_tree.jl")


function model_no_bin_definition(problem_params::DynamicSDDiP.ProblemParams, scenario_tree)

    """
    This model is the same as analyzed in the paper by Chen and Luedtke (2022)
    and first proposed by Ntaimo and Sen (2005).

    This is the model version without binary approximation of the state variables.
    """

    number_of_servers = 40
    number_of_clients = 50
    number_of_realizations = problem_params.number_of_realizations # 200

    # C: J
    c = [54, 40, 53, 73, 77, 77, 50, 50, 73, 73,
    80, 58, 67, 79, 71, 46, 43, 42, 42, 63,
    79, 43, 51, 41, 41, 42, 56, 50, 65, 77,
    58, 68, 62, 48, 69, 59, 42, 51, 75, 43,
    66, 65, 59, 75, 45, 52, 69, 76, 48, 69]

    # q: IxJ
    q = [1 7 1 17 7 8 19 17 16 13 2 5 7 13 19 15 25 15 10 5 13 15 15 13 25 17 10 20 24 5 9 21 20 2 21 2 22 13 7 16 23 19 2 7 17 9 15 14 8 3;
    19 13 24 16 11 18 2 18 20 19 11 13 1 16 0 0 5 3 6 15 17 12 4 7 14 6 11 14 17 4 5 12 5 15 9 15 15 23 4 19 9 4 5 23 12 8 13 16 1 23;
    6 2 23 18 7 12 3 6 6 25 25 0 22 0 10 0 13 10 19 22 6 17 23 12 15 23 11 22 0 9 6 5 5 9 14 19 4 1 7 12 3 7 13 9 14 1 17 11 4 11;
    9 15 1 20 21 17 20 18 9 19 7 25 19 4 1 13 11 14 10 7 24 15 20 18 14 14 4 24 2 25 21 13 11 4 7 4 9 25 19 3 18 13 10 18 14 6 15 8 7 5;
    16 25 5 22 18 20 12 3 2 0 17 25 9 3 13 24 24 22 15 6 24 20 25 21 13 1 8 7 16 8 5 20 14 17 18 1 23 6 5 12 14 16 9 25 23 7 18 21 1 22;
    17 15 16 18 22 24 6 11 17 3 24 1 13 6 5 8 18 11 13 9 18 0 4 5 12 17 13 25 8 22 16 9 4 10 2 5 14 0 6 21 14 10 15 2 25 0 17 1 2 23;
    25 22 23 5 14 2 13 11 3 11 7 22 24 20 12 20 20 15 20 19 15 1 3 3 11 21 0 1 23 1 13 9 23 6 13 23 19 15 12 20 3 0 8 22 5 10 4 3 3 24;
    11 8 5 10 18 1 6 11 0 19 10 0 20 21 6 0 3 9 10 9 21 16 18 18 3 5 18 24 2 23 11 21 17 17 21 9 14 18 7 13 16 23 2 20 11 6 20 16 12 14;
    4 3 12 19 0 21 13 24 1 25 24 11 2 14 25 3 9 24 13 5 8 20 9 24 7 21 0 16 8 4 25 4 5 7 9 7 1 20 4 14 5 4 24 1 5 17 4 23 13 13;
    9 6 3 22 14 17 12 22 10 7 4 13 23 22 20 16 1 16 21 8 13 22 16 3 25 10 1 13 6 17 20 13 10 17 24 22 5 8 24 23 14 15 8 8 12 20 19 7 22 12;
    14 5 21 13 2 9 0 14 17 4 2 7 2 13 15 6 1 20 21 5 8 1 11 18 0 12 7 25 7 8 11 15 14 7 18 23 9 12 17 21 5 0 9 15 9 17 14 25 9 10;
    1 22 13 20 11 5 7 12 1 19 13 5 4 4 6 10 13 15 4 22 25 1 11 13 7 15 24 4 19 2 20 7 11 15 15 6 10 11 3 24 13 17 2 14 22 22 7 18 10 19;
    19 0 16 23 19 12 15 15 5 11 5 8 2 1 15 24 13 13 24 11 5 12 1 0 12 13 4 18 9 23 1 25 15 10 4 5 9 13 5 6 25 3 2 24 22 1 19 8 17 11;
    9 17 14 1 3 15 1 20 11 10 4 23 7 24 24 17 20 8 15 11 5 25 4 2 20 9 12 4 17 9 7 25 10 2 5 20 8 17 11 5 18 17 10 13 10 5 20 15 25 22;
    22 3 0 1 12 18 1 5 19 21 14 20 17 16 19 1 2 5 17 3 15 11 10 0 6 7 4 18 6 20 4 9 21 17 12 7 20 14 14 16 9 13 19 15 8 13 25 6 23 14;
    1 25 25 1 3 20 5 10 25 3 1 13 21 11 5 22 1 5 9 13 15 9 12 6 21 17 19 11 17 0 8 2 6 7 24 10 23 14 11 21 14 21 5 0 16 2 11 9 22 7;
    25 18 14 9 19 3 1 18 16 21 17 25 10 0 4 21 19 15 11 14 11 1 20 0 10 12 15 13 22 13 1 18 25 9 17 24 22 8 25 3 18 8 24 24 16 15 17 2 11 1;
    12 13 4 16 24 20 7 22 0 22 16 15 18 17 19 17 23 20 12 20 13 24 24 0 1 1 8 17 1 19 18 22 23 18 9 11 11 12 15 12 16 1 11 2 4 24 11 6 16 22;
    16 11 18 23 1 3 20 10 7 8 9 8 4 25 14 9 9 25 4 1 8 9 16 5 1 15 10 25 19 25 21 13 16 10 20 20 16 11 23 7 25 21 0 0 12 21 1 7 20 25;
    8 13 22 18 5 16 24 20 19 0 4 8 9 5 7 8 25 5 12 23 3 10 12 20 14 17 18 21 8 23 17 25 21 23 13 25 8 11 5 7 1 15 13 25 18 5 16 7 13 3;
    15 23 19 18 24 10 16 2 10 22 6 4 3 16 19 4 0 14 11 15 9 18 12 15 7 17 25 11 13 20 7 6 2 13 13 7 15 5 6 13 5 5 25 20 11 15 18 20 2 13;
    12 18 5 8 23 15 8 17 24 20 1 25 16 17 22 1 14 18 13 23 19 6 21 13 9 23 1 14 17 1 16 19 8 3 9 12 18 15 13 3 9 17 2 16 2 4 25 7 0 23;
    2 0 7 2 17 3 23 16 5 5 22 19 11 16 14 0 12 24 23 10 12 17 18 3 7 0 23 5 7 0 25 12 23 0 17 15 2 0 9 0 25 25 8 10 23 10 18 22 22 21;
    8 9 19 5 14 16 4 5 4 7 13 3 16 22 1 25 21 22 13 9 10 17 1 12 21 13 12 2 18 15 24 23 4 8 13 18 5 3 2 9 25 3 11 8 24 2 11 14 9 25;
    25 1 12 1 15 15 1 16 14 19 4 4 24 4 23 15 25 7 12 21 15 9 5 13 0 16 4 4 23 11 3 19 0 8 3 20 1 20 12 15 20 10 22 8 6 22 6 15 15 13;
    22 9 15 24 13 5 17 20 0 21 0 24 8 6 18 9 3 5 0 11 7 19 0 19 10 13 4 25 4 20 0 18 6 25 23 20 22 10 23 10 14 9 3 24 24 2 19 8 9 18;
    15 4 7 18 1 14 16 12 13 14 19 10 5 25 17 10 0 8 7 14 2 19 12 14 13 18 20 20 18 9 21 0 5 0 18 13 25 10 14 17 15 15 17 1 14 1 12 22 22 25;
    0 4 16 17 6 22 18 24 25 10 12 17 14 11 14 19 15 18 0 19 0 12 1 4 14 25 20 24 24 18 11 2 24 7 3 5 0 2 22 5 21 1 4 19 2 10 1 6 23 21;
    14 5 6 20 24 13 4 3 5 2 15 18 18 23 3 20 4 7 16 8 8 1 20 22 25 22 5 20 5 13 10 22 4 0 24 2 5 15 7 22 13 17 19 13 6 23 18 19 15 5;
    7 16 4 12 14 1 16 3 12 3 11 10 0 23 15 5 18 21 10 6 18 22 1 23 1 0 15 25 1 12 8 6 22 6 12 17 18 1 18 19 14 24 13 12 22 25 22 19 16 20;
    24 15 24 22 5 2 23 21 25 18 10 8 21 19 1 16 9 12 9 22 15 6 13 19 3 12 19 3 1 17 12 4 11 5 11 21 4 9 4 15 4 7 6 8 6 7 1 1 5 25;
    15 9 23 16 10 3 16 21 25 4 2 3 25 25 19 18 18 25 11 11 5 9 8 1 11 21 20 13 25 1 18 15 5 3 5 21 2 5 8 5 7 14 16 22 20 10 7 10 1 19;
    14 18 3 6 8 2 22 1 10 2 17 3 16 8 17 15 18 4 22 21 21 0 23 8 9 10 0 6 19 12 2 8 1 18 13 0 23 7 15 22 20 13 13 23 19 9 1 18 9 23;
    16 12 21 7 1 14 4 1 15 2 5 13 25 3 18 24 15 2 16 11 3 9 10 9 9 18 11 18 7 18 7 23 4 16 13 18 16 15 12 5 23 16 16 17 7 2 19 4 22 24;
    3 8 3 22 22 14 11 6 3 6 18 5 1 21 0 1 6 11 10 16 0 7 20 18 20 15 4 12 19 11 21 8 18 23 4 10 18 10 23 11 16 15 4 10 6 21 25 1 9 17;
    1 24 24 3 25 5 25 4 11 14 21 8 16 3 22 8 24 3 15 13 12 0 3 5 5 7 14 12 14 5 2 25 6 20 5 23 7 17 21 7 10 24 8 0 14 7 10 4 11 4;
    2 6 12 2 16 20 8 24 25 24 23 12 22 4 15 17 2 22 17 0 11 1 3 13 21 12 24 9 24 14 13 23 6 18 18 4 19 25 1 18 8 17 8 18 13 14 21 11 10 15;
    7 4 0 9 5 7 8 20 20 3 21 0 4 9 4 12 12 19 10 7 9 7 5 3 8 0 22 13 9 2 6 24 11 10 6 0 23 16 15 20 21 7 7 2 12 4 9 5 24 16;
    17 19 4 13 4 3 21 25 17 7 1 12 5 8 23 3 2 11 14 9 7 16 18 2 2 9 23 7 10 20 21 2 16 21 12 18 10 9 20 9 12 15 5 9 18 3 11 15 12 4;
    19 22 24 11 3 0 11 3 17 13 2 20 19 24 17 17 0 11 19 13 11 9 21 9 13 4 19 25 11 12 4 10 20 5 11 24 13 11 12 18 21 10 21 2 5 1 9 6 1 11]

    # q0: J
    q0 = 1000.0 * ones(number_of_servers)

    # D: IxJ
    d = [1 7 1 17 7 8 19 17 16 13 2 5 7 13 19 15 25 15 10 5 13 15 15 13 25 17 10 20 24 5 9 21 20 2 21 2 22 13 7 16 23 19 2 7 17 9 15 14 8 3;
    19 13 24 16 11 18 2 18 20 19 11 13 1 16 0 0 5 3 6 15 17 12 4 7 14 6 11 14 17 4 5 12 5 15 9 15 15 23 4 19 9 4 5 23 12 8 13 16 1 23;
    6 2 23 18 7 12 3 6 6 25 25 0 22 0 10 0 13 10 19 22 6 17 23 12 15 23 11 22 0 9 6 5 5 9 14 19 4 1 7 12 3 7 13 9 14 1 17 11 4 11;
    9 15 1 20 21 17 20 18 9 19 7 25 19 4 1 13 11 14 10 7 24 15 20 18 14 14 4 24 2 25 21 13 11 4 7 4 9 25 19 3 18 13 10 18 14 6 15 8 7 5;
    16 25 5 22 18 20 12 3 2 0 17 25 9 3 13 24 24 22 15 6 24 20 25 21 13 1 8 7 16 8 5 20 14 17 18 1 23 6 5 12 14 16 9 25 23 7 18 21 1 22;
    17 15 16 18 22 24 6 11 17 3 24 1 13 6 5 8 18 11 13 9 18 0 4 5 12 17 13 25 8 22 16 9 4 10 2 5 14 0 6 21 14 10 15 2 25 0 17 1 2 23;
    25 22 23 5 14 2 13 11 3 11 7 22 24 20 12 20 20 15 20 19 15 1 3 3 11 21 0 1 23 1 13 9 23 6 13 23 19 15 12 20 3 0 8 22 5 10 4 3 3 24;
    11 8 5 10 18 1 6 11 0 19 10 0 20 21 6 0 3 9 10 9 21 16 18 18 3 5 18 24 2 23 11 21 17 17 21 9 14 18 7 13 16 23 2 20 11 6 20 16 12 14;
    4 3 12 19 0 21 13 24 1 25 24 11 2 14 25 3 9 24 13 5 8 20 9 24 7 21 0 16 8 4 25 4 5 7 9 7 1 20 4 14 5 4 24 1 5 17 4 23 13 13;
    9 6 3 22 14 17 12 22 10 7 4 13 23 22 20 16 1 16 21 8 13 22 16 3 25 10 1 13 6 17 20 13 10 17 24 22 5 8 24 23 14 15 8 8 12 20 19 7 22 12;
    14 5 21 13 2 9 0 14 17 4 2 7 2 13 15 6 1 20 21 5 8 1 11 18 0 12 7 25 7 8 11 15 14 7 18 23 9 12 17 21 5 0 9 15 9 17 14 25 9 10;
    1 22 13 20 11 5 7 12 1 19 13 5 4 4 6 10 13 15 4 22 25 1 11 13 7 15 24 4 19 2 20 7 11 15 15 6 10 11 3 24 13 17 2 14 22 22 7 18 10 19;
    19 0 16 23 19 12 15 15 5 11 5 8 2 1 15 24 13 13 24 11 5 12 1 0 12 13 4 18 9 23 1 25 15 10 4 5 9 13 5 6 25 3 2 24 22 1 19 8 17 11;
    9 17 14 1 3 15 1 20 11 10 4 23 7 24 24 17 20 8 15 11 5 25 4 2 20 9 12 4 17 9 7 25 10 2 5 20 8 17 11 5 18 17 10 13 10 5 20 15 25 22;
    22 3 0 1 12 18 1 5 19 21 14 20 17 16 19 1 2 5 17 3 15 11 10 0 6 7 4 18 6 20 4 9 21 17 12 7 20 14 14 16 9 13 19 15 8 13 25 6 23 14;
    1 25 25 1 3 20 5 10 25 3 1 13 21 11 5 22 1 5 9 13 15 9 12 6 21 17 19 11 17 0 8 2 6 7 24 10 23 14 11 21 14 21 5 0 16 2 11 9 22 7;
    25 18 14 9 19 3 1 18 16 21 17 25 10 0 4 21 19 15 11 14 11 1 20 0 10 12 15 13 22 13 1 18 25 9 17 24 22 8 25 3 18 8 24 24 16 15 17 2 11 1;
    12 13 4 16 24 20 7 22 0 22 16 15 18 17 19 17 23 20 12 20 13 24 24 0 1 1 8 17 1 19 18 22 23 18 9 11 11 12 15 12 16 1 11 2 4 24 11 6 16 22;
    16 11 18 23 1 3 20 10 7 8 9 8 4 25 14 9 9 25 4 1 8 9 16 5 1 15 10 25 19 25 21 13 16 10 20 20 16 11 23 7 25 21 0 0 12 21 1 7 20 25;
    8 13 22 18 5 16 24 20 19 0 4 8 9 5 7 8 25 5 12 23 3 10 12 20 14 17 18 21 8 23 17 25 21 23 13 25 8 11 5 7 1 15 13 25 18 5 16 7 13 3;
    15 23 19 18 24 10 16 2 10 22 6 4 3 16 19 4 0 14 11 15 9 18 12 15 7 17 25 11 13 20 7 6 2 13 13 7 15 5 6 13 5 5 25 20 11 15 18 20 2 13;
    12 18 5 8 23 15 8 17 24 20 1 25 16 17 22 1 14 18 13 23 19 6 21 13 9 23 1 14 17 1 16 19 8 3 9 12 18 15 13 3 9 17 2 16 2 4 25 7 0 23;
    2 0 7 2 17 3 23 16 5 5 22 19 11 16 14 0 12 24 23 10 12 17 18 3 7 0 23 5 7 0 25 12 23 0 17 15 2 0 9 0 25 25 8 10 23 10 18 22 22 21;
    8 9 19 5 14 16 4 5 4 7 13 3 16 22 1 25 21 22 13 9 10 17 1 12 21 13 12 2 18 15 24 23 4 8 13 18 5 3 2 9 25 3 11 8 24 2 11 14 9 25;
    25 1 12 1 15 15 1 16 14 19 4 4 24 4 23 15 25 7 12 21 15 9 5 13 0 16 4 4 23 11 3 19 0 8 3 20 1 20 12 15 20 10 22 8 6 22 6 15 15 13;
    22 9 15 24 13 5 17 20 0 21 0 24 8 6 18 9 3 5 0 11 7 19 0 19 10 13 4 25 4 20 0 18 6 25 23 20 22 10 23 10 14 9 3 24 24 2 19 8 9 18;
    15 4 7 18 1 14 16 12 13 14 19 10 5 25 17 10 0 8 7 14 2 19 12 14 13 18 20 20 18 9 21 0 5 0 18 13 25 10 14 17 15 15 17 1 14 1 12 22 22 25;
    0 4 16 17 6 22 18 24 25 10 12 17 14 11 14 19 15 18 0 19 0 12 1 4 14 25 20 24 24 18 11 2 24 7 3 5 0 2 22 5 21 1 4 19 2 10 1 6 23 21;
    14 5 6 20 24 13 4 3 5 2 15 18 18 23 3 20 4 7 16 8 8 1 20 22 25 22 5 20 5 13 10 22 4 0 24 2 5 15 7 22 13 17 19 13 6 23 18 19 15 5;
    7 16 4 12 14 1 16 3 12 3 11 10 0 23 15 5 18 21 10 6 18 22 1 23 1 0 15 25 1 12 8 6 22 6 12 17 18 1 18 19 14 24 13 12 22 25 22 19 16 20;
    24 15 24 22 5 2 23 21 25 18 10 8 21 19 1 16 9 12 9 22 15 6 13 19 3 12 19 3 1 17 12 4 11 5 11 21 4 9 4 15 4 7 6 8 6 7 1 1 5 25;
    15 9 23 16 10 3 16 21 25 4 2 3 25 25 19 18 18 25 11 11 5 9 8 1 11 21 20 13 25 1 18 15 5 3 5 21 2 5 8 5 7 14 16 22 20 10 7 10 1 19;
    14 18 3 6 8 2 22 1 10 2 17 3 16 8 17 15 18 4 22 21 21 0 23 8 9 10 0 6 19 12 2 8 1 18 13 0 23 7 15 22 20 13 13 23 19 9 1 18 9 23;
    16 12 21 7 1 14 4 1 15 2 5 13 25 3 18 24 15 2 16 11 3 9 10 9 9 18 11 18 7 18 7 23 4 16 13 18 16 15 12 5 23 16 16 17 7 2 19 4 22 24;
    3 8 3 22 22 14 11 6 3 6 18 5 1 21 0 1 6 11 10 16 0 7 20 18 20 15 4 12 19 11 21 8 18 23 4 10 18 10 23 11 16 15 4 10 6 21 25 1 9 17;
    1 24 24 3 25 5 25 4 11 14 21 8 16 3 22 8 24 3 15 13 12 0 3 5 5 7 14 12 14 5 2 25 6 20 5 23 7 17 21 7 10 24 8 0 14 7 10 4 11 4;
    2 6 12 2 16 20 8 24 25 24 23 12 22 4 15 17 2 22 17 0 11 1 3 13 21 12 24 9 24 14 13 23 6 18 18 4 19 25 1 18 8 17 8 18 13 14 21 11 10 15;
    7 4 0 9 5 7 8 20 20 3 21 0 4 9 4 12 12 19 10 7 9 7 5 3 8 0 22 13 9 2 6 24 11 10 6 0 23 16 15 20 21 7 7 2 12 4 9 5 24 16;
    17 19 4 13 4 3 21 25 17 7 1 12 5 8 23 3 2 11 14 9 7 16 18 2 2 9 23 7 10 20 21 2 16 21 12 18 10 9 20 9 12 15 5 9 18 3 11 15 12 4;
    19 22 24 11 3 0 11 3 17 13 2 20 19 24 17 17 0 11 19 13 11 9 21 9 13 4 19 25 11 12 4 10 20 5 11 24 13 11 12 18 21 10 21 2 5 1 9 6 1 11]

    ν = 736.11


    model = SDDP.LinearPolicyGraph(
        stages = problem_params.number_of_stages,
        lower_bound = 0.0,
        optimizer = Gurobi.Optimizer,
        sense = :Max,
    ) do subproblem, t

        # Add state variable
        JuMP.@variable(subproblem, x[1:number_of_servers], SDDP.State, Bin, initial_value = 0)

        if t == 1
            # Stage objective
            SDDP.@stageobjective(subproblem, -sum(c[j] * x[j].out for j in 1:number_of_servers))

            # Bound constraints
            JuMP.@constraint(subproblem, sum(x[j].out for j in 1:number_of_servers) <= ν)
            # JuMP.@constraint(subproblem, sum(x[j] for j in 1:number_of_servers) >= 0)

        elseif t == 2
            # Add local variables
            JuMP.@variable(subproblem, y[1:number_of_clients,1:number_of_servers], Bin)
            JuMP.@variable(subproblem, overflow[1:number_of_servers])

            # Random variable
            JuMP.@variable(subproblem, h[1:number_of_clients])

            # Stage objective
            SDDP.@stageobjective(subproblem, -sum(q[i,j] * y[i,j] for i in 1:number_of_clients for j in 1:number_of_servers) + sum(q0[j] * overflow[j] for j in 1:number_of_servers))

            # Add constraints
            JuMP.@constraint(subproblem, cons1[j in 1:number_of_servers], sum(d[i,j] * y[i,j] for i in 1:number_of_clients) - rest[j] <= u * x[j].in)
            JuMP.@constraint(subproblem, cons2[i in 1:number_of_clients], sum(y[i,j] for j in 1:number_of_servers) == h[i])

            # PARAMETERIZE THE RANDOM VARIABLES
            ########################################################################
            # Get the support and probability for the current stage
            support = scenario_tree.support_array[t]
            probability = scenario_tree.probabilities_array[t]

            # Parameterize the demand
            SDDP.parameterize(subproblem, support, probability) do ω
                JuMP.fix(h[1], ω.xi1)
                JuMP.fix(h[2], ω.xi2)
                JuMP.fix(h[3], ω.xi3)
                JuMP.fix(h[4], ω.xi4)
                JuMP.fix(h[5], ω.xi5)
                JuMP.fix(h[6], ω.xi6)
                JuMP.fix(h[7], ω.xi7)
                JuMP.fix(h[8], ω.xi8)
                JuMP.fix(h[9], ω.xi9)
                JuMP.fix(h[10], ω.xi10)
                JuMP.fix(h[11], ω.xi11)
                JuMP.fix(h[12], ω.xi12)
                JuMP.fix(h[13], ω.xi13)
                JuMP.fix(h[14], ω.xi14)
                JuMP.fix(h[15], ω.xi15)
                JuMP.fix(h[16], ω.xi16)
                JuMP.fix(h[17], ω.xi17)
                JuMP.fix(h[18], ω.xi18)
                JuMP.fix(h[19], ω.xi19)
                JuMP.fix(h[20], ω.xi20)
                JuMP.fix(h[21], ω.xi21)
                JuMP.fix(h[22], ω.xi22)
                JuMP.fix(h[23], ω.xi23)
                JuMP.fix(h[24], ω.xi24)
                JuMP.fix(h[25], ω.xi25)
                JuMP.fix(h[26], ω.xi26)
                JuMP.fix(h[27], ω.xi27)
                JuMP.fix(h[28], ω.xi28)
                JuMP.fix(h[29], ω.xi29)
                JuMP.fix(h[30], ω.xi30)
                JuMP.fix(h[31], ω.xi31)
                JuMP.fix(h[32], ω.xi32)
                JuMP.fix(h[33], ω.xi33)
                JuMP.fix(h[34], ω.xi34)
                JuMP.fix(h[35], ω.xi35)
                JuMP.fix(h[36], ω.xi36)
                JuMP.fix(h[37], ω.xi37)
                JuMP.fix(h[38], ω.xi38)
                JuMP.fix(h[39], ω.xi39)
                JuMP.fix(h[40], ω.xi40)
            end
        end

        # Switch the model to silent mode
        JuMP.set_silent(subproblem)

        return
    end

    return model
end


function model_no_bin_set_up(
    number_of_stages::Int,
    number_of_realizations::Int;
    algo_params::DynamicSDDiP.AlgoParams = DynamicSDDiP.AlgoParams(),
    applied_solvers::DynamicSDDiP.AppliedSolvers = DynamicSDDiP.AppliedSolvers(),
    tree_seed::Int = 12345
)

    ############################################################################
    # DEFINE PROBLEM PARAMS
    ############################################################################
    problem_params = DynamicSDDiP.ProblemParams(number_of_stages, number_of_realizations, tree_seed = tree_seed)

    ############################################################################
    # GET FINITE SCENARIO TREE FOR MODEL
    ############################################################################
    scenario_tree = get_recombining_scenario_tree(algo_params, problem_params)

    ############################################################################
    # DEFINE MODEL
    ############################################################################
    model = model_no_bin_definition(problem_params, scenario_tree)

    return (model = model, problem_params = problem_params)
end
